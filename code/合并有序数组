我的解决方式：
public void merge(int[] nums1, int m, int[] nums2, int n) {
        int index1 = 0;
        for (int i = 0; i < n; i++) {
            while (nums2[i] > nums1[index1] && index1 < m + i) {
                index1++;
            }
            for (int j = m + i - 1; j >= index1; j--) {
                nums1[j + 1] = nums1[j];
            }
            nums1[index1] = nums2[i];
        }
    }  

这种解决方法需要移动多次，如果只是同样倒过来插入，仍然会存在移动次数过多的问题。

解决思路：直接覆盖原数组，不移动，单纯的从尾部比较覆盖。
代码如下：
public void merge(int[] nums1, int m, int[] nums2, int n) {
        int index1 = m - 1;
        int index2 = n - 1;
        int index = m + n - 1;
        while (index >= 0 && index1 >= 0 && index2 >= 0) {
            if (nums1[index1] >= nums2[index2]) {
                nums1[index--] = nums1[index1--];
            } else {
                nums1[index--] = nums2[index2--];
            }
        }
        while (index1 >= 0) {
            nums1[index--] = nums1[index1--];
        }
        while (index2 >= 0) {
            nums1[index--] = nums2[index2--];
        }
    }
小结：要克服常规思路的局限性，这种类型的题并不需要移动这么多次数。
